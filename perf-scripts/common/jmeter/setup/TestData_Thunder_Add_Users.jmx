<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Add Users">
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Server Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="thunder_host" elementType="Argument">
            <stringProp name="Argument.name">thunder_host</stringProp>
            <stringProp name="Argument.value">${__P(host,localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="thunder_port" elementType="Argument">
            <stringProp name="Argument.name">thunder_port</stringProp>
            <stringProp name="Argument.value">${__P(port,8090)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Test Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="usernamePrefix" elementType="Argument">
            <stringProp name="Argument.name">usernamePrefix</stringProp>
            <stringProp name="Argument.value">testUser_</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">j55lIvck7w*R</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="noOfThreads" elementType="Argument">
            <stringProp name="Argument.name">noOfThreads</stringProp>
            <stringProp name="Argument.value">${__P(concurrency,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="noOfUsers" elementType="Argument">
            <stringProp name="Argument.name">noOfUsers</stringProp>
            <stringProp name="Argument.value">${__P(noOfUsers,1000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="noOfUsersPerThread" elementType="Argument">
            <stringProp name="Argument.name">noOfUsersPerThread</stringProp>
            <stringProp name="Argument.value">${__P(userCountPerThread,1000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampUpPeriod" elementType="Argument">
            <stringProp name="Argument.name">rampUpPeriod</stringProp>
            <stringProp name="Argument.value">${__P(rampUpPeriod,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="noOfNodes" elementType="Argument">
            <stringProp name="Argument.name">noOfNodes</stringProp>
            <stringProp name="Argument.value">${__P(noOfNodes,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create User Schema" enabled="true">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create User Scheme" enabled="true">
          <stringProp name="HTTPSampler.domain">${thunder_host}</stringProp>
          <stringProp name="HTTPSampler.port">${thunder_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/user-schemas</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;defaultuser&quot;,&#xd;
  &quot;schema&quot;: {&#xd;
    &quot;username&quot;: {&#xd;
      &quot;type&quot;: &quot;string&quot;,&#xd;
      &quot;required&quot;: true&#xd;
    },&#xd;
    &quot;password&quot;: {&#xd;
      &quot;type&quot;: &quot;string&quot;,&#xd;
      &quot;required&quot;: true&#xd;
    },&#xd;
    &quot;email&quot;: {&#xd;
      &quot;type&quot;: &quot;string&quot;,&#xd;
      &quot;required&quot;: true&#xd;
    },&#xd;
    &quot;firstname&quot;: {&#xd;
      &quot;type&quot;: &quot;string&quot;&#xd;
    },&#xd;
    &quot;lastname&quot;: {&#xd;
      &quot;type&quot;: &quot;string&quot;&#xd;
    },&#xd;
    &quot;dateOfBirth&quot;: {&#xd;
      &quot;type&quot;: &quot;string&quot;&#xd;
    },&#xd;
    &quot;gender&quot;: {&#xd;
      &quot;type&quot;: &quot;string&quot;&#xd;
    },&#xd;
    &quot;phoneNumber&quot;: {&#xd;
      &quot;type&quot;: &quot;string&quot;&#xd;
    },&#xd;
    &quot;isActive&quot;: {&#xd;
      &quot;type&quot;: &quot;boolean&quot;,&#xd;
      &quot;required&quot;: true&#xd;
    },&#xd;
    &quot;createdAt&quot;: {&#xd;
      &quot;type&quot;: &quot;string&quot;&#xd;
    },&#xd;
    &quot;updatedAt&quot;: {&#xd;
      &quot;type&quot;: &quot;string&quot;&#xd;
    },&#xd;
    &quot;lastLogin&quot;: {&#xd;
      &quot;type&quot;: &quot;string&quot;&#xd;
    },&#xd;
    &quot;profile&quot;: {&#xd;
      &quot;type&quot;: &quot;object&quot;,&#xd;
      &quot;properties&quot;: {&#xd;
        &quot;avatarUrl&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;bio&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;website&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;socialLinks&quot;: {&#xd;
          &quot;type&quot;: &quot;object&quot;,&#xd;
          &quot;properties&quot;: {&#xd;
            &quot;linkedin&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
            &quot;twitter&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
            &quot;github&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
            &quot;facebook&quot;: { &quot;type&quot;: &quot;string&quot; }&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    },&#xd;
    &quot;address&quot;: {&#xd;
      &quot;type&quot;: &quot;object&quot;,&#xd;
      &quot;properties&quot;: {&#xd;
        &quot;street&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;city&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;state&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;country&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;postalCode&quot;: { &quot;type&quot;: &quot;string&quot; }&#xd;
      }&#xd;
    },&#xd;
    &quot;preferences&quot;: {&#xd;
      &quot;type&quot;: &quot;object&quot;,&#xd;
      &quot;properties&quot;: {&#xd;
        &quot;language&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;theme&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;notifications&quot;: {&#xd;
          &quot;type&quot;: &quot;object&quot;,&#xd;
          &quot;properties&quot;: {&#xd;
            &quot;email&quot;: { &quot;type&quot;: &quot;boolean&quot; },&#xd;
            &quot;sms&quot;: { &quot;type&quot;: &quot;boolean&quot; },&#xd;
            &quot;push&quot;: { &quot;type&quot;: &quot;boolean&quot; }&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    },&#xd;
    &quot;security&quot;: {&#xd;
      &quot;type&quot;: &quot;object&quot;,&#xd;
      &quot;properties&quot;: {&#xd;
        &quot;twoFactorEnabled&quot;: { &quot;type&quot;: &quot;boolean&quot; },&#xd;
        &quot;loginAttempts&quot;: { &quot;type&quot;: &quot;number&quot; },&#xd;
        &quot;lastPasswordChange&quot;: { &quot;type&quot;: &quot;string&quot; }&#xd;
      }&#xd;
    },&#xd;
    &quot;subscription&quot;: {&#xd;
      &quot;type&quot;: &quot;object&quot;,&#xd;
      &quot;properties&quot;: {&#xd;
        &quot;plan&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;status&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;renewalDate&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;paymentMethod&quot;: {&#xd;
          &quot;type&quot;: &quot;object&quot;,&#xd;
          &quot;properties&quot;: {&#xd;
            &quot;type&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
            &quot;last4Digits&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
            &quot;billingAddress&quot;: {&#xd;
              &quot;type&quot;: &quot;object&quot;,&#xd;
              &quot;properties&quot;: {&#xd;
                &quot;street&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
                &quot;city&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
                &quot;country&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
                &quot;postalCode&quot;: { &quot;type&quot;: &quot;string&quot; }&#xd;
              }&#xd;
            }&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    },&#xd;
    &quot;employment&quot;: {&#xd;
      &quot;type&quot;: &quot;object&quot;,&#xd;
      &quot;properties&quot;: {&#xd;
        &quot;company&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;role&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;startDate&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;endDate&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;employmentType&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;department&quot;: { &quot;type&quot;: &quot;string&quot; }&#xd;
      }&#xd;
    },&#xd;
    &quot;partnerProfile&quot;: {&#xd;
      &quot;type&quot;: &quot;object&quot;,&#xd;
      &quot;properties&quot;: {&#xd;
        &quot;firstname&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;lastname&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;email&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;company&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;role&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;partnershipType&quot;: { &quot;type&quot;: &quot;string&quot; },&#xd;
        &quot;phoneNumber&quot;: { &quot;type&quot;: &quot;string&quot; }&#xd;
      }&#xd;
    },&#xd;
    &quot;metadata&quot;: {&#xd;
      &quot;type&quot;: &quot;object&quot;,&#xd;
      &quot;properties&quot;: {}&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="201 HTTP Code Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="103171776">HTTP/1.1 201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create Users" enabled="true">
        <stringProp name="ThreadGroup.num_threads">${noOfThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUpPeriod}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">${noOfUsersPerThread}</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="User Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">${noOfUsers}</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">user_count_id</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set Requesting Node" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">int numOfNodes = Integer.parseInt(vars.get(&quot;noOfNodes&quot;));
int x = Integer.parseInt(vars.get(&quot;user_count_id&quot;));
int y = x - (x/numOfNodes)*numOfNodes;

if (y == 0) {
    vars.put(&quot;serverNode&quot;, &quot;node1&quot;);
} else if (y == 1) {
    vars.put(&quot;serverNode&quot;, &quot;node2&quot;);
} else if (y == 2) {
    vars.put(&quot;serverNode&quot;, &quot;node3&quot;);
} else {
    vars.put(&quot;serverNode&quot;, &quot;node4&quot;);
}</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="X-Server-Select" elementType="Header">
              <stringProp name="Header.name">X-Server-Select</stringProp>
              <stringProp name="Header.value">${serverNode}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1-Initiate Register User" enabled="true">
          <stringProp name="HTTPSampler.domain">${thunder_host}</stringProp>
          <stringProp name="HTTPSampler.port">${thunder_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/users</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;organizationUnit&quot;: &quot;456e8400-e29b-41d4-a716-446655440001&quot;,&#xd;
    &quot;type&quot;: &quot;defaultuser&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
        &quot;username&quot;: &quot;${usernamePrefix}${user_count_id}&quot;,&#xd;
        &quot;password&quot;: &quot;${password}&quot;,&#xd;
        &quot;email&quot;: &quot;john.doe@example.com&quot;,&#xd;
        &quot;firstname&quot;: &quot;John&quot;,&#xd;
        &quot;lastname&quot;: &quot;Doe&quot;,&#xd;
        &quot;dateOfBirth&quot;: &quot;1990-05-14&quot;,&#xd;
        &quot;gender&quot;: &quot;male&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;+1-202-555-0147&quot;,&#xd;
        &quot;isActive&quot;: true,&#xd;
        &quot;createdAt&quot;: &quot;2025-10-14T08:30:00Z&quot;,&#xd;
        &quot;updatedAt&quot;: &quot;2025-10-14T08:30:00Z&quot;,&#xd;
        &quot;lastLogin&quot;: &quot;2025-10-14T09:00:00Z&quot;,&#xd;
        &quot;profile&quot;: {&#xd;
            &quot;avatarUrl&quot;: &quot;https://example.com/avatars/johndoe.jpg&quot;,&#xd;
            &quot;bio&quot;: &quot;Software engineer passionate about distributed systems and open source.&quot;,&#xd;
            &quot;website&quot;: &quot;https://johndoe.dev&quot;,&#xd;
            &quot;socialLinks&quot;: {&#xd;
                &quot;linkedin&quot;: &quot;https://linkedin.com/in/johndoe&quot;,&#xd;
                &quot;twitter&quot;: &quot;https://twitter.com/johndoe&quot;,&#xd;
                &quot;github&quot;: &quot;https://github.com/johndoe&quot;,&#xd;
                &quot;facebook&quot;: &quot;https://facebook.com/johndoe&quot;&#xd;
            }&#xd;
        },&#xd;
        &quot;address&quot;: {&#xd;
            &quot;street&quot;: &quot;123 Main Street&quot;,&#xd;
            &quot;city&quot;: &quot;New York&quot;,&#xd;
            &quot;state&quot;: &quot;NY&quot;,&#xd;
            &quot;country&quot;: &quot;USA&quot;,&#xd;
            &quot;postalCode&quot;: &quot;10001&quot;&#xd;
        },&#xd;
        &quot;preferences&quot;: {&#xd;
            &quot;language&quot;: &quot;en&quot;,&#xd;
            &quot;theme&quot;: &quot;dark&quot;,&#xd;
            &quot;notifications&quot;: {&#xd;
                &quot;email&quot;: true,&#xd;
                &quot;sms&quot;: false,&#xd;
                &quot;push&quot;: true&#xd;
            }&#xd;
        },&#xd;
        &quot;security&quot;: {&#xd;
            &quot;twoFactorEnabled&quot;: true,&#xd;
            &quot;loginAttempts&quot;: 1,&#xd;
            &quot;lastPasswordChange&quot;: &quot;2025-09-20T10:15:00Z&quot;&#xd;
        },&#xd;
        &quot;subscription&quot;: {&#xd;
            &quot;plan&quot;: &quot;premium&quot;,&#xd;
            &quot;status&quot;: &quot;active&quot;,&#xd;
            &quot;renewalDate&quot;: &quot;2026-10-14T00:00:00Z&quot;,&#xd;
            &quot;paymentMethod&quot;: {&#xd;
                &quot;type&quot;: &quot;credit_card&quot;,&#xd;
                &quot;last4Digits&quot;: &quot;4242&quot;,&#xd;
                &quot;billingAddress&quot;: {&#xd;
                    &quot;street&quot;: &quot;456 Market Street&quot;,&#xd;
                    &quot;city&quot;: &quot;San Francisco&quot;,&#xd;
                    &quot;country&quot;: &quot;USA&quot;,&#xd;
                    &quot;postalCode&quot;: &quot;94105&quot;&#xd;
                }&#xd;
            }&#xd;
        },&#xd;
        &quot;employment&quot;: {&#xd;
            &quot;company&quot;: &quot;TechNova Inc.&quot;,&#xd;
            &quot;role&quot;: &quot;Senior Software Engineer&quot;,&#xd;
            &quot;startDate&quot;: &quot;2021-03-01&quot;,&#xd;
            &quot;endDate&quot;: &quot;&quot;,&#xd;
            &quot;employmentType&quot;: &quot;full-time&quot;,&#xd;
            &quot;department&quot;: &quot;Engineering&quot;&#xd;
        },&#xd;
        &quot;partnerProfile&quot;: {&#xd;
            &quot;firstname&quot;: &quot;Jane&quot;,&#xd;
            &quot;lastname&quot;: &quot;Smith&quot;,&#xd;
            &quot;email&quot;: &quot;jane.smith@partnerco.com&quot;,&#xd;
            &quot;company&quot;: &quot;PartnerCo&quot;,&#xd;
            &quot;role&quot;: &quot;Business Development Manager&quot;,&#xd;
            &quot;partnershipType&quot;: &quot;strategic&quot;,&#xd;
            &quot;phoneNumber&quot;: &quot;+1-202-555-0182&quot;&#xd;
        },&#xd;
        &quot;metadata&quot;: {}&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="201 HTTP Code Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="103171776">HTTP/1.1 201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
